{"remainingRequest":"/home/developer/Documents/SIUA/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/developer/Documents/SIUA/frontend/src/components/requests/create/CreateRequestF.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/developer/Documents/SIUA/frontend/src/components/requests/create/CreateRequestF.vue","mtime":1546444218008},{"path":"/home/developer/Documents/SIUA/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/developer/Documents/SIUA/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/developer/Documents/SIUA/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/developer/Documents/SIUA/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Multiselect from 'vue-multiselect'\nimport {axios} from '../../../helpers/axios';\nimport { required, requiredIf } from 'vuelidate/lib/validators'\nvar API_IP = process.env.VUE_APP_API_IP\n\nexport default {\n  props: ['stp','object'],\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      payment_types: [\"Fijo\",\"Variable\"],\n      obj: this.object,\n      step: this.stp,\n      tipo_pago: \"\",\n      payment_number: \"\",\n      payments: [],\n      submitting: false\n    }\n  },\n  validations: {\n    tipo_pago: { required },\n    payment_number: {\n      required: requiredIf(function (){\n        return this.tipo_pago === 'Fijo'\n      })\n    },\n    payments: {\n      requiredIf: requiredIf(function (){\n        return this.tipo_pago === 'Fijo'\n      }),\n      $each: {\n        fecha: { required },\n        valor: { required }\n      }\n    }\n  },\n  methods: {\n    addPay(){\n      this.payments = []\n      var payment_value = (this.obj.valor_solicitud)/(this.payment_number)\n      if( this.tipo_pago == \"Variable\"){\n        payment_value = \"\"\n      }\n      for (var i = 0; i < parseInt(this.payment_number); i++) {\n        this.payments.push({\n          solicitud: this.obj._id,\n          valor: payment_value,\n          fecha: \"\",\n          numero: i+1\n        })\n      }\n    },\n    clearPayments(){\n      this.payment_number= \"\",\n      this.payments= []\n    },\n    saveContinue(){\n      this.$v.$touch()\n      if (this.$v.$invalid) {\n        this.$swal({\n          title: 'Error!',\n          text: 'Debe llenar campos necesarios en el formulario',\n          type: 'error',\n          confirmButtonText: 'Cerrar'\n        });\n      } else {\n        this.submitting = true;\n        // Put a Solicitud\n        axios\n        .put(API_IP+\"/request/\"+this.obj._id, {\n          // Parametros enviados por esta vista\n          cantidad_pagos: parseInt(this.payment_number),\n          tipo_pago: this.tipo_pago,\n          // Parametros enviados para completar el update\n          auditoria:this.obj.auditoria,\n          clausulas:this.obj.clausulas,\n          estado:this.obj.estado,\n          _id:this.obj._id,\n          numero_solicitud:this.obj.numero_solicitud,\n          tipo_solicitud:this.obj.tipo_solicitud,\n          fecha_inicio:this.obj.fecha_inicio,\n          fecha_final:this.obj.fecha_final,\n          valor_solicitud:this.obj.valor_solicitud,\n          justificacion:this.obj.justificacion,\n          justificacion_adicional:this.obj.justificacion_adicional,\n          objetivo_general:this.obj.objetivo_general,\n          especificaciones_tecnicas:this.obj.especificaciones_tecnicas,\n          obligaciones_especificas:this.obligations,\n          rubros:this.obj.rubros,\n          trabajadores:this.obj.trabajadores,\n          ciudad:this.obj.ciudad\n        })\n        .then(response => {\n          console.log(response);\n          this.$swal({\n            title: 'Exito!',\n            text: 'Se actualizo la solicitud con exito.',\n            type: 'success',\n            confirmButtonText: 'Aceptar'\n          }).then((result) => {\n            if (result.value) {\n              if(this.tipo_pago === 'Fijo'){\n                // Post a pagos\n                axios\n                .post(API_IP+\"/payment/\", this.payments )\n                .then(response => {\n                  console.log(response);\n                  this.submitting = false;\n                  this.$swal({\n                    title: 'Exito!',\n                    text: 'Se crearon los pagos correctamente',\n                    type: 'success',\n                    confirmButtonText: 'Aceptar'\n                  }).then((result) => {\n                    if (result.value) {\n                      this.$router.push({ name: 'showrequest', params: { type: this.obj.tipo_solicitud.nombre.toLowerCase() ,id: this.obj._id } });\n                    }\n                  });\n                })\n                .catch(error => {\n                  console.log(error.response.data.msg);\n                  this.$swal({\n                    title: 'Error!',\n                    text: error.response.data.msg,\n                    type: 'error',\n                    confirmButtonText: 'Cerrar'\n                  });\n                  this.submitting = false;\n                });\n              } else {\n                this.submitting = false;\n                this.$router.push({ name: 'showrequest', params: { type: this.obj.tipo_solicitud.nombre.toLowerCase() ,id: this.obj._id } });\n              }\n            }\n          });\n        })\n        .catch(error => {\n          console.log(error);\n          this.$swal({\n            title: 'Error!',\n            text: error.response.data.error.msg,\n            type: 'error',\n            confirmButtonText: 'Cerrar'\n          });\n          this.submitting = false;\n        })\n      }\n    },\n    cancel(){\n      this.$v.$reset()\n      this.$swal({\n        title: 'Espere',\n        text: '¿Esta seguro que quiere cancelar la operación?',\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Si',\n        cancelButtonText: 'No',\n      }).then((result) => {\n        if (result.value) {\n          this.$swal({\n            title: 'Cancelado',\n            type: 'success'\n          }).then((result) => {\n            if (result.value) {\n              this.$router.push({ name: 'requests' });\n            }\n          });\n        }\n      });\n    },\n    previous(){\n      this.$swal({\n        title: 'Espere',\n        html: '¿Esta seguro que quiere volver?<br>Los cambios hechos aqui no se guardaran.',\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Si',\n        cancelButtonText: 'No',\n      }).then((result) => {\n        if (result.value) {\n          this.$swal({\n            title: 'Volviendo',\n            type: 'success'\n          }).then((result) => {\n            if (result.value) {\n              this.$router.push({ name: 'updaterequest', params: { type: this.request_type.toLowerCase() ,id: this.obj._id } });\n            }\n          });\n        }\n      });\n    }\n  }\n}\n",{"version":3,"sources":["CreateRequestF.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CreateRequestF.vue","sourceRoot":"src/components/requests/create","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-md-8 offset-md-2\" style=\"margin-bottom:80px;\">\n        <div class=\"row\">\n          <div class=\"col\">\n            <button class=\"btn btn-primary\" type=\"button\" @click=\"previous()\" style=\"background:#003e1e;border-color:#003e1e;\">\n              <font-awesome-icon icon=\"arrow-left\" size=\"lg\"></font-awesome-icon>\n            </button>\n          </div>\n        </div>\n        <div>&nbsp;</div>\n        <div class=\"row justify-content-center\">\n          <div class=\"col-10 align-self-center\">\n            <form v-on:submit.prevent=\"saveContinue\" novalidate>\n              <div class=\"form-group\" :class=\"{ 'form-group--error': $v.tipo_pago.$error }\">\n                <div class=\"row\">\n                  <div class=\"col-auto\">\n                    <label for=\"payment_type\">Forma de pago:</label>\n                  </div>\n                  <div class=\"col-6\">\n                    <multiselect @input=\"clearPayments\" v-model.trim=\"$v.tipo_pago.$model\" :options=\"payment_types\" :searchable=\"false\" :close-on-select=\"true\" :show-labels=\"true\" placeholder=\"Seleccione un tipo de pago\">\n                    </multiselect>\n                    <div class=\"alert alert-danger\" role=\"alert\" v-if=\"$v.tipo_pago.$dirty && !$v.tipo_pago.required\">Es requerido un tipo de pago</div>\n                  </div>\n                </div>\n              </div>\n              <div v-if=\"tipo_pago === 'Fijo' \">\n                <hr>\n                <div class=\"form-group\" :class=\"{ 'form-group--error': $v.payment_number.$error }\">\n                  <div class=\"row\">\n                    <div class=\"col-auto\">\n                      <label for=\"payment_number\">Numéro de pagos:</label>\n                    </div>\n                    <div class=\"col-6\">\n                      <input type=\"number\" @input=\"addPay()\" v-model.trim=\"$v.payment_number.$model\" class=\"form-control\" id=\"payment_number\" aria-describedby=\"payment_number\">\n                      <div class=\"alert alert-danger\" role=\"alert\" v-if=\"$v.payment_number.$dirty && !$v.payment_number.required\">Es requerido el numero de pagos</div>\n                    </div>\n                  </div>\n                </div>\n                <div v-if=\"parseInt(payment_number) !== 0 && tipo_pago != ''\" class=\"form-group\">\n                  <table class=\"table table-striped\" style=\"text-align:center;background-color:#dddddd;\">\n                    <thead style=\"background-color: #003e1e; color:white;\">\n                      <tr>\n                        <th scope=\"col\"># de pago</th>\n                        <th scope=\"col\">Valor</th>\n                        <th scope=\"col\">Fecha</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr v-for=\"(payment, index) in $v.payments.$each.$iter\" :key=\"index\">\n                        <td>\n                          {{parseInt(index)+1}}\n                        </td>\n                        <td>\n                          <div class=\"input-group mb-3\">\n                            <input type=\"number\" :value=\"payment.valor.$model\" class=\"form-control\" id=\"payment_number\" aria-describedby=\"payment_number\" disabled>\n                            <div class=\"input-group-append\">\n                              <span class=\"input-group-text\">$</span>\n                            </div>\n                          </div>\n                        </td>\n                        <td>\n                          <div class=\"form-group\" :class=\"{ 'form-group--error': $v.$error }\">\n                            <input type=\"date\" v-model.trim=\"payment.fecha.$model\" class=\"form-control\" id=\"payment_number\" aria-describedby=\"payment_number\">\n                            <div class=\"alert alert-danger\" role=\"alert\" v-if=\"payment.fecha.$dirty && !payment.fecha.required\">Es requerida una fecha</div>\n                          </div>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n              <div>&nbsp;</div>\n              <div class=\"row justify-content-center\">\n                <div class=\"col-8 align-self-center\">\n                  <div class=\"row justify-content-center\">\n                    <div class=\"col-3 text-center\">\n                      <button class=\"btn btn-primary\" type=\"button\" @click=\"cancel()\" style=\"background:#003e1e;border-color:#003e1e;\">\n                        <font-awesome-icon icon=\"times-circle\" size=\"lg\"></font-awesome-icon>\n                        Cancelar\n                      </button>\n                    </div>\n                    <div class=\"col-3 text-center\">\n                      <button class=\"btn btn-primary\" type=\"button\" @click=\"previous()\" style=\"background:#003e1e;border-color:#003e1e;\">\n                        <font-awesome-icon icon=\"arrow-left\" size=\"lg\"></font-awesome-icon>\n                        Anterior\n                      </button>\n                    </div>\n                    <div class=\"col-3 text-center\">\n                      <button class=\"btn btn-primary\" :disabled=\"submitting\" type=\"submit\" style=\"background:#003e1e;border-color:#003e1e;\">\n                        <font-awesome-icon icon=\"save\" size=\"lg\"></font-awesome-icon>\n                        Guardar y continuar\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Multiselect from 'vue-multiselect'\nimport {axios} from '../../../helpers/axios';\nimport { required, requiredIf } from 'vuelidate/lib/validators'\nvar API_IP = process.env.VUE_APP_API_IP\n\nexport default {\n  props: ['stp','object'],\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      payment_types: [\"Fijo\",\"Variable\"],\n      obj: this.object,\n      step: this.stp,\n      tipo_pago: \"\",\n      payment_number: \"\",\n      payments: [],\n      submitting: false\n    }\n  },\n  validations: {\n    tipo_pago: { required },\n    payment_number: {\n      required: requiredIf(function (){\n        return this.tipo_pago === 'Fijo'\n      })\n    },\n    payments: {\n      requiredIf: requiredIf(function (){\n        return this.tipo_pago === 'Fijo'\n      }),\n      $each: {\n        fecha: { required },\n        valor: { required }\n      }\n    }\n  },\n  methods: {\n    addPay(){\n      this.payments = []\n      var payment_value = (this.obj.valor_solicitud)/(this.payment_number)\n      if( this.tipo_pago == \"Variable\"){\n        payment_value = \"\"\n      }\n      for (var i = 0; i < parseInt(this.payment_number); i++) {\n        this.payments.push({\n          solicitud: this.obj._id,\n          valor: payment_value,\n          fecha: \"\",\n          numero: i+1\n        })\n      }\n    },\n    clearPayments(){\n      this.payment_number= \"\",\n      this.payments= []\n    },\n    saveContinue(){\n      this.$v.$touch()\n      if (this.$v.$invalid) {\n        this.$swal({\n          title: 'Error!',\n          text: 'Debe llenar campos necesarios en el formulario',\n          type: 'error',\n          confirmButtonText: 'Cerrar'\n        });\n      } else {\n        this.submitting = true;\n        // Put a Solicitud\n        axios\n        .put(API_IP+\"/request/\"+this.obj._id, {\n          // Parametros enviados por esta vista\n          cantidad_pagos: parseInt(this.payment_number),\n          tipo_pago: this.tipo_pago,\n          // Parametros enviados para completar el update\n          auditoria:this.obj.auditoria,\n          clausulas:this.obj.clausulas,\n          estado:this.obj.estado,\n          _id:this.obj._id,\n          numero_solicitud:this.obj.numero_solicitud,\n          tipo_solicitud:this.obj.tipo_solicitud,\n          fecha_inicio:this.obj.fecha_inicio,\n          fecha_final:this.obj.fecha_final,\n          valor_solicitud:this.obj.valor_solicitud,\n          justificacion:this.obj.justificacion,\n          justificacion_adicional:this.obj.justificacion_adicional,\n          objetivo_general:this.obj.objetivo_general,\n          especificaciones_tecnicas:this.obj.especificaciones_tecnicas,\n          obligaciones_especificas:this.obligations,\n          rubros:this.obj.rubros,\n          trabajadores:this.obj.trabajadores,\n          ciudad:this.obj.ciudad\n        })\n        .then(response => {\n          console.log(response);\n          this.$swal({\n            title: 'Exito!',\n            text: 'Se actualizo la solicitud con exito.',\n            type: 'success',\n            confirmButtonText: 'Aceptar'\n          }).then((result) => {\n            if (result.value) {\n              if(this.tipo_pago === 'Fijo'){\n                // Post a pagos\n                axios\n                .post(API_IP+\"/payment/\", this.payments )\n                .then(response => {\n                  console.log(response);\n                  this.submitting = false;\n                  this.$swal({\n                    title: 'Exito!',\n                    text: 'Se crearon los pagos correctamente',\n                    type: 'success',\n                    confirmButtonText: 'Aceptar'\n                  }).then((result) => {\n                    if (result.value) {\n                      this.$router.push({ name: 'showrequest', params: { type: this.obj.tipo_solicitud.nombre.toLowerCase() ,id: this.obj._id } });\n                    }\n                  });\n                })\n                .catch(error => {\n                  console.log(error.response.data.msg);\n                  this.$swal({\n                    title: 'Error!',\n                    text: error.response.data.msg,\n                    type: 'error',\n                    confirmButtonText: 'Cerrar'\n                  });\n                  this.submitting = false;\n                });\n              } else {\n                this.submitting = false;\n                this.$router.push({ name: 'showrequest', params: { type: this.obj.tipo_solicitud.nombre.toLowerCase() ,id: this.obj._id } });\n              }\n            }\n          });\n        })\n        .catch(error => {\n          console.log(error);\n          this.$swal({\n            title: 'Error!',\n            text: error.response.data.error.msg,\n            type: 'error',\n            confirmButtonText: 'Cerrar'\n          });\n          this.submitting = false;\n        })\n      }\n    },\n    cancel(){\n      this.$v.$reset()\n      this.$swal({\n        title: 'Espere',\n        text: '¿Esta seguro que quiere cancelar la operación?',\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Si',\n        cancelButtonText: 'No',\n      }).then((result) => {\n        if (result.value) {\n          this.$swal({\n            title: 'Cancelado',\n            type: 'success'\n          }).then((result) => {\n            if (result.value) {\n              this.$router.push({ name: 'requests' });\n            }\n          });\n        }\n      });\n    },\n    previous(){\n      this.$swal({\n        title: 'Espere',\n        html: '¿Esta seguro que quiere volver?<br>Los cambios hechos aqui no se guardaran.',\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Si',\n        cancelButtonText: 'No',\n      }).then((result) => {\n        if (result.value) {\n          this.$swal({\n            title: 'Volviendo',\n            type: 'success'\n          }).then((result) => {\n            if (result.value) {\n              this.$router.push({ name: 'updaterequest', params: { type: this.request_type.toLowerCase() ,id: this.obj._id } });\n            }\n          });\n        }\n      });\n    }\n  }\n}\n</script>\n"]}]}